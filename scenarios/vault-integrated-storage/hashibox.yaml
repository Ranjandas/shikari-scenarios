plain: true
provision:
  - mode: system # install Vault license
    script: |
      #!/bin/bash

      if [[ -n $VAULT_LICENSE ]]; then
        echo "VAULT_LICENSE=$VAULT_LICENSE" > /etc/vault.d/vault.env
      fi

  - mode: system # generate certificates
    script: |
      #!/bin/bash

      # avoid running the script on restarts
      if [[ -f /shikari-bootstrapped ]] then
        exit 0
      fi

      cd /etc/vault.d/certs

      consul tls cert create -domain vault -server -additional-ipaddress $(ip -json -4 addr show lima0  | jq -r '.[] | .addr_info[].local') -additional-dnsname ${HOSTNAME}.local
      
      chown -R vault:vault /etc/vault.d/certs/*

  - mode: system # configure Vault Server
    script: |
      #!/bin/bash

      # avoid running the script on restarts
      if [[ -f /shikari-bootstrapped ]] then
        exit 0
      fi

      HOSTNAME=$(hostname -s)

      cat <<-EOF > /etc/vault.d/vault.hcl
      api_addr     = "https://${HOSTNAME}.local:8200"
      cluster_addr = "https://${HOSTNAME}.local:8201"
      
      ui = true
      log_level="trace"

      storage "raft" {
        path = "/opt/vault"

        $(for x in $(seq $SHIKARI_SERVER_COUNT); do
        echo retry_join {
        echo leader_api_addr      = \"https://lima-${SHIKARI_CLUSTER_NAME}-srv-0$x.local:8200\"
        echo leader_ca_cert_file  = \"/etc/vault.d/certs/vault-agent-ca.pem\"
        echo leader_client_cert_  = \"/etc/vault.d/certs/dc1-server-vault-0.pem\"
        echo leader_client_kile   = \"/etc/vault.d/certs/dc1-server-vault-0-key.pem\"
        echo }
       done)
      }

      listener "tcp" {
        address       = "0.0.0.0:8200"
        
        tls_cert_file       = "/etc/vault.d/certs/dc1-server-vault-0.pem"
        tls_key_file        = "/etc/vault.d/certs/dc1-server-vault-0-key.pem"
        tls_client_ca_file  = "/etc/vault.d/certs/vault-agent-ca.pem"
        
        cluster_address = "0.0.0.0:8201"
      }
      
      # this will disable perf standby even if the license allows
      #disable_performance_standby = true
      EOF

      # Use nomad to format the config file if it exists
      command -v nomad &>/dev/null && nomad fmt /etc/vault.d/vault.hcl

  - mode: system  # start and enable Vault
    script: |
      systemctl enable --now vault

  - mode: system  # init and unseal Vault
    script: |
      #!/usr/bin/env bash

      # avoid running the script on restarts

      if [[ -f /shikari-bootstrapped ]] then
        exit 0
      fi

      export VAULT_ADDR=https://127.0.0.1:8200
      export VAULT_CACERT=/etc/vault.d/certs/vault-agent-ca.pem
      
      if [[ "$HOSTNAME" == *"01"* ]]; then
        
        until curl -s --cacert /etc/vault.d/certs/vault-agent-ca.pem $VAULT_ADDR/v1/sys/health; do
          echo "Waiting for Vault"
        done

        vault operator init -key-shares=1 -key-threshold=1 -format=json > ~/VaultCreds.json
        
        sudo mv ~/VaultCreds.json /etc/vault.d/VaultCreds.json
        sudo chown root:vault /etc/vault.d/VaultCreds.json
        sudo chmod 0640 /etc/vault.d/VaultCreds.json
        
        VAULT_UNSEAL_KEY=$(sudo cat /etc/vault.d/VaultCreds.json | jq -r .unseal_keys_b64[0])
        VAULT_TOKEN=$(sudo cat /etc/vault.d/VaultCreds.json | jq -r .root_token)
        
        echo export VAULT_ADDR="https://127.0.0.1:8200" | sudo tee -a /etc/profile.d/vault.sh
        echo export VAULT_CACERT=$VAULT_CACERT | sudo tee -a /etc/profile.d/vault.sh
        echo export VAULT_UNSEAL_KEY=$VAULT_UNSEAL_KEY | sudo tee -a /etc/profile.d/vault.sh 
        echo export VAULT_TOKEN=$VAULT_TOKEN | sudo tee -a /etc/profile.d/vault.sh      

        # Unseal Vault      
        vault operator unseal ${VAULT_UNSEAL_KEY}

        vault login ${VAULT_TOKEN}

        # execute the following in a subshell to not overwrite VAULT_ADDR
        (
          if [[ $SHIKARI_SERVER_COUNT > 1 ]]; then
            for x in `seq 2 $SHIKARI_SERVER_COUNT`; do

              VAULT_ADDR="https://lima-${SHIKARI_CLUSTER_NAME}-srv-0$x.local:8200"

              until [ "$(curl -s --cacert $VAULT_CACERT $VAULT_ADDR/v1/sys/health | jq -r '.initialized')" = "true" ]; do
                echo "Waiting for Vault"
                sleep 2
              done

              vault operator unseal $VAULT_UNSEAL_KEY
            done
          fi
        )
      fi

      touch /shikari-bootstrapped

networks:
  - lima: shared
vmType: qemu
env:
  SHIKARI_SCENARIO_NAME: "vault-integrated-storage"
