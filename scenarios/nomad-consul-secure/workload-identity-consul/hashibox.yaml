images:
  # Try to use a local image first.
  - location: `../../packer/.artifacts/c-enterprise-1.18-n-enterprise-1.7/c-enterprise-1.18-n-enterprise-1.7.qcow2

mounts: []
containerd:
  system: false
  user: false
provision:
  - mode: system # set license
    script: |
      #!/bin/bash
      echo CONSUL_LICENSE=$CONSUL_LICENSE > /etc/consul.d/consul.env
      echo NOMAD_LICENSE=$NOMAD_LICENSE > /etc/nomad.d/nomad.env

  - mode: system # configure Consul
    script: |
      #!/bin/bash
  
      function setConfig {
          local mode=$1
          local cluster=$2

          # Set the config files accordingly 
          if [[ $mode == "server" ]]; then
      cat <<-EOF > /etc/consul.d/consul.hcl
        data_dir  = "/opt/consul/data"
        log_level  = "INFO"
        bind_addr = {{ "\"{{ GetInterfaceIP \\\"eth0\\\"}}\"" }}
        client_addr = "0.0.0.0"
        retry_join = ["lima-$cluster-srv-01.internal"]
        datacenter = "$cluster"

        ui_config {
          enabled = true
        }

        connect {
          enabled = true
        }

        server = true
        bootstrap_expect = ${SHIKARI_SERVER_COUNT}
        
        # required for transparent proxy
        recursors   = ["1.1.1.1", "1.1.0.0"]
        addresses {
          dns = {{ "\"{{ GetInterfaceIP \\\"eth0\\\"}}\"" }}
        }
        acl {
          enabled = true
          down_policy = "extend-cache"
          default_policy = "deny"
          enable_token_persistence = true
          tokens = {
            initial_management = "root"
            agent = "root"
          }
        }

      EOF

          elif [[ $mode == "client" ]]; then
      cat <<-EOF > /etc/consul.d/consul.hcl
        data_dir  = "/opt/consul/data"
        log_level  = "INFO"
        bind_addr = {{ "\"{{ GetInterfaceIP \\\"eth0\\\"}}\"" }}
        client_addr = "0.0.0.0"
        retry_join = ["lima-$cluster-srv-01.internal"]
        datacenter = "$cluster"

        connect {
          enabled = true
        }

        ports {
          grpc = 8502
        }

        server = false

        # required for transparent proxy
        recursors   = ["1.1.1.1", "1.1.0.0"]
        addresses {
          dns = {{ "\"{{ GetInterfaceIP \\\"eth0\\\"}}\"" }}
        }
        acl {
          enabled = true
          down_policy = "extend-cache"
          default_policy = "deny"
          enable_token_persistence = true
          tokens = {
            agent = "root"
          }
        }
      EOF
          else
            echo "Invalid mode for setConfig"
          fi
        }

          # Check if the environment variable '{SHIKARI_VM_MODE}' is set
          if [[ -n ${SHIKARI_VM_MODE} ]]; then
              echo "{SHIKARI_VM_MODE} is set to: ${SHIKARI_VM_MODE}"
          else
              echo "{SHIKARI_VM_MODE} is not set."
          fi

          # Check if the environment variable '{SHIKARI_CLUSTER_NAME}' is set
          if [[ -n ${SHIKARI_CLUSTER_NAME} ]]; then
              echo "{SHIKARI_CLUSTER_NAME} is set to: ${SHIKARI_CLUSTER_NAME}"
          else
              echo "{SHIKARI_CLUSTER_NAME} is not set."
          fi

          setConfig ${SHIKARI_VM_MODE} ${SHIKARI_CLUSTER_NAME}

  - mode: system # configure Nomad
    script: |
      #!/bin/bash    
      function setConfig {
          local mode=$1
          local cluster=$2

          # Set the config files accordingly 
          if [[ $mode == "server" ]]; then
      cat <<-EOF > /etc/nomad.d/nomad.hcl
          data_dir  = "/opt/nomad/data"
          bind_addr = "0.0.0.0"

          server {
          enabled = true
          bootstrap_expect = ${SHIKARI_SERVER_COUNT}

          server_join {
              retry_join = ["lima-$cluster-srv-01.internal"]
          }
          }
          datacenter = "$cluster"

          # workload identity configs
          # ACLS
          acl {
            enabled = true
          }

          # consul config
          consul {
            address = "127.0.0.1:8500"
            token = "root"

            service_identity {
              aud = ["consul.io"]
              ttl = "1h"
            }

            task_identity {
              aud = ["consul.io"]
              ttl = "1h"
            }
          }
      EOF

          elif [[ $mode == "client" ]]; then
      cat <<-EOF > /etc/nomad.d/nomad.hcl
          data_dir  = "/opt/nomad/data"
          bind_addr = "0.0.0.0"
          datacenter = "$cluster"

          client {
          enabled = true
          servers = ["lima-$cluster-srv-01.internal"]
          }
          
          # workload identity configs
          # ACLS
          acl {
            enabled = true
          }

          # consul config
          consul {
            address               = "127.0.0.1:8500"
            token                 = "root"
          }
      EOF
          else
              echo "Invalid mode for setConfig"
          fi
      }


          # Check if the environment variable '{SHIKARI_VM_MODE}' is set
          if [[ -n ${SHIKARI_VM_MODE} ]]; then
              echo "{SHIKARI_VM_MODE} is set to: ${SHIKARI_VM_MODE}"
          else
              echo "{SHIKARI_VM_MODE} is not set."
          fi

          # Check if the environment variable '{SHIKARI_CLUSTER_NAME}' is set
          if [[ -n ${SHIKARI_CLUSTER_NAME} ]]; then
              echo "{SHIKARI_CLUSTER_NAME} is set to: ${SHIKARI_CLUSTER_NAME}"
          else
              echo "{SHIKARI_CLUSTER_NAME} is not set."
          fi

          setConfig ${SHIKARI_VM_MODE} ${SHIKARI_CLUSTER_NAME}
  - mode:
    script: |
      systemctl enable --now docker
      systemctl enable --now nomad consul
  - mode: user
    script: |
      #!/bin/sh
      nomad -autocomplete-install
      consul -autocomplete-install

  - mode: system # acl bootstrap nomad
    script: |
      #!/bin/sh
      if [[ ${SHIKARI_VM_MODE} == "server" ]]; then
      # Set NOMAD_ADDR
      export NOMAD_ADDR=http://127.0.0.1:4646
      # Wait for nomad servers to come up and bootstrap nomad ACL
      until curl -s ${NOMAD_ADDR}/v1/status/leader | grep 4647; do
        echo "Waiting for Nomad to start"
        sleep 2
      done
      # Bootstrap nomad
      echo "00000000-0000-0000-0000-000000000000"|nomad acl bootstrap - 2>&1
      fi

  - mode: system # setup workload identity
    script: |
     #!/bin/sh
     # Set env vars for tool CLIs
      export CONSUL_HTTP_TOKEN="root"
      nomad setup consul -y

networks:
  - lima: user-v2
vmType: qemu

