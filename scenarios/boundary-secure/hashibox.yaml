plain: true

provision:
  - mode: system # install boundary
    script: |
      #!/bin/bash

      # install boundary (this should be moved to packer)
      dnf install -y boundary postgresql

  - mode: system # start postgres db
    script: |
      #!/bin/bash

      if [[ "${HOSTNAME}" != "lima-${SHIKARI_CLUSTER_NAME}-srv-01" ]]; then
        exit 0
      fi

      systemctl start docker
      docker run --name boundary-postgres -e POSTGRES_PASSWORD=password -p 5432:5432 -d postgres:13-alpine

      until pg_isready -h localhost -U postgres; do echo waiting; sleep 1; done

      PGPASSWORD=password psql -U postgres -h localhost -c 'create database boundary'

  - mode: system # Create certificates and required directories
    script: |
      #!/bin/bash

      LIMA_IP_ADDR=$(ip -json -4 addr show lima0  | jq -r '.[] | .addr_info[].local')

      # Generate TLS Certificates
      mkdir -p /etc/boundary.d/certs
      cd /etc/boundary.d/certs
      consul tls ca create -domain boundary
      consul tls cert create -server -domain boundary -additional-ipaddress $LIMA_IP_ADDR
      cat boundary-agent-ca.pem >> dc1-server-boundary-0.pem
      chown boundary:boundary /etc/boundary.d/certs/*

      install -o boundary -g boundary -d /var/log/boundary

  - mode: system # Configure controller
    script: |
      #!/bin/bash

      if [[ "${SHIKARI_VM_MODE}" != "server" ]]; then
        exit 0
      fi

      LIMA_IP_ADDR=$(ip -json -4 addr show lima0  | jq -r '.[] | .addr_info[].local')

      # Create Controller Config
      cat <<-EOF > /etc/boundary.d/boundary.hcl
      disable_mlock = true

      controller {
        name = "${HOSTNAME}"
        description = "Boundary Controller: ${HOSTNAME}"

        database {
          url = "postgresql://postgres:password@lima-${SHIKARI_CLUSTER_NAME}-srv-01.local:5432/boundary"
        }
      }

      listener "tcp" {
        address = "${LIMA_IP_ADDR}"
        purpose = "api"
        
        tls_disable         = false

        tls_cert_file       = "/etc/boundary.d/certs/dc1-server-boundary-0.pem"
        tls_key_file        = "/etc/boundary.d/certs/dc1-server-boundary-0-key.pem"
        tls_client_ca_file  = "/etc/boundary.d/certs/boundary-agent-ca.pem"
      }

      # # Data-plane listener configuration block (used for worker coordination)
      listener "tcp" {
        address = "${LIMA_IP_ADDR}"
        purpose = "cluster"
      }

      # # Root KMS configuration block: this is the root key for Boundary
      # # Use a production KMS such as AWS KMS in production installs
      kms "aead" {
        purpose = "root"
        aead_type = "aes-gcm"
        key = "sP1fnF5Xz85RrXyELHFeZg9Ad2qt4Z4bgNHVGtD6ung="
        key_id = "global_root"
      }

      # # Worker authorization KMS
      # # Use a production KMS such as AWS KMS for production installs
      # # This key is the same key used in the worker configuration
      kms "aead" {
        purpose = "worker-auth"
        aead_type = "aes-gcm"
        key = "8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ="
        key_id = "global_worker-auth"
      }

      # # Recovery KMS block: configures the recovery key for Boundary
      # # Use a production KMS such as AWS KMS for production installs
      kms "aead" {
        purpose = "recovery"
        aead_type = "aes-gcm"
        key = "8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ="
        key_id = "global_recovery"
      }

      events {
        audit_enabled       = true
        sysevents_enabled   = true
        observations_enable = true
        sink "stderr" {
          name = "all-events"
          description = "All events sent to stderr"
          event_types = ["*"]
          format = "cloudevents-json"
        }
        sink {
          name = "file-sink"
          description = "All events sent to a file"
          event_types = ["*"]
          format = "cloudevents-json"
          file {
            path = "/var/log/boundary"
            file_name = "controller.log"
          }
          audit_config {
            audit_filter_overrides {
              sensitive = "redact"
              secret    = "redact"
            }
          }
        }
      }
      EOF

  - mode: system # Configure Workers
    script: |
      #!/bin/bash

      if [[ "${SHIKARI_VM_MODE}" != "client" ]]; then
        exit 0
      fi

      cat <<-EOF > /etc/boundary.d/boundary.hcl
      listener "tcp" {
          purpose = "proxy"
          tls_disable = false
          address = "0.0.0.0"

          tls_cert_file       = "/etc/boundary.d/certs/dc1-server-boundary-0.pem"
          tls_key_file        = "/etc/boundary.d/certs/dc1-server-boundary-0-key.pem"
          tls_client_ca_file  = "/etc/boundary.d/certs/boundary-agent-ca.pem"
      }

      worker {
        #   # Name attr must be unique across workers
        name = "${HOSTNAME}"
        description = "A default worker created demonstration"

        #   # Workers must be able to reach controllers on :9201
        controllers = [
        $(for x in $(seq $SHIKARI_SERVER_COUNT); do
          echo \"lima-${SHIKARI_CLUSTER_NAME}-srv-0$x.local\",
        done)
        ]

        public_addr = "${HOSTNAME}.local"
      }

      # # must be same key as used on controller config
      kms "aead" {
          purpose = "worker-auth"
          aead_type = "aes-gcm"
          key = "8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ="
          key_id = "global_worker-auth"
      }
      EOF


  - mode: system # Populate boundary database
    script: |
      #!/bin/bash

      if [[ "${HOSTNAME}" != "lima-${SHIKARI_CLUSTER_NAME}-srv-01" ]]; then
        exit 0
      fi

      boundary database init -config /etc/boundary.d/boundary.hcl | tee /etc/boundary.d/initial_login.txt

  - mode: system # Start Boundary
    script: |
      #!/bin/bash

      if [[ "${SHIKARI_VM_MODE}" == "server" ]]; then
        until pg_isready -h lima-${SHIKARI_CLUSTER_NAME}-srv-01.local -U postgres; do echo waiting; sleep 1; done
      fi

      systemctl start boundary

networks:
  - lima: shared
vmType: qemu
env:
  SHIKARI_SCENARIO_NAME: "boundary-secure"
